- hosts: localhost
  connection: local
  gather_facts: False
  vars:
    aws_key_name: "{{ lookup('env', 'AWS_KEY_NAME') }}"
    aws_security_group: "{{ lookup('env', 'AWS_SECURITY_GROUP') }}"
    aws_instance_type: "{{ lookup('env', 'AWS_BUILD_INSTANCE_TYPE') }}"
    aws_ami: "{{ lookup('env', 'AWS_TEST_AMI') }}"
    aws_instance_name: "{{ lookup('env', 'IMAGE_NAME') }}"
    aws_region: "{{ lookup('env', 'AWS_REGION') }}"
    aws_subnet_id: "{{ lookup('env', 'AWS_SUBNET_ID') }}"
  tasks:
    - name: stop existing aws instance
      ec2_instance:
        key_name: "{{ aws_key_name }}"
        vpc_subnet_id: "{{ aws_subnet_id }}"
        name: "{{ aws_instance_name }}"
        state: absent

    - name: read build artifact
      include_vars:
        file: packer-build-manifest-aws.json
        name: build_artifact

    - name: print ami_id
      set_fact: region_ami_ids={{ build_artifact['builds'][0].artifact_id }}

    - name: print
      debug: var=region_ami_ids

    - name: set region and ami_id
      set_fact: aws_region={{ region_ami_ids.split(':')[0] }}
      set_fact: aws_ami={{ region_ami_ids.split(':')[1] }}

    - name: Provision the test instance
      ec2:
         assign_public_ip: yes
         key_name: "{{ aws_key_name }}"
         group: "{{ aws_security_group }}"
         instance_type: "{{ aws_instance_type }}"
         image: "{{ aws_ami }}"
         wait: true
         exact_count: 1
         count_tag:
            Name: "{{ aws_instance_name }}"
         instance_tags:
            Name: "{{ aws_instance_name }}"
         region: "{{ aws_region }}"
         volumes:
           - device_name: /dev/sda1
             volume_type: gp2
             volume_size: 29
             delete_on_termination: true
         vpc_subnet_id: "{{ aws_subnet_id }}"
      register: ec2

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_dns_name }}"
        groupname: launched
      with_items: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 60
        timeout: 600
        state: started
      with_items: "{{ ec2.instances }}"

    - name: Make sure the known hosts file exists
      file: "path={{ ssh_known_hosts_file }} state=touch"

    - name: Check host name availability
      shell: "ssh-keygen -f {{ ssh_known_hosts_file }} -F {{ item.public_dns_name }}"
      with_items: "{{ ec2.instances }}"
      register: z_ssh_known_host_results
      ignore_errors: yes

    - name: Scan the public key
      shell: "{{ ssh_known_hosts_command}} {{ item.item.public_dns_name }} >> {{ ssh_known_hosts_file }}"
      with_items: "{{ z_ssh_known_host_results.results }}"
      when: item.stdout == ""

- include: tests.yml

- name: Terminate instances
  hosts: localhost
  connection: local
  tasks:
    - name: Terminate instances that were previously launched
      ec2:
        state: 'absent'
        instance_ids: "{{ ec2.instance_ids }}"
